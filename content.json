const contentList = {
  "Nitrogen": {
    "title": "Nitrogen",
    "year": "2022",
    "tags": ["Python","Pygame","ModernGL"],
    "images": [
      ["img/Nitrogen/screenshot1679628584.png"],
      ["img/Nitrogen/screenshot1683340450.png"],
      ["img/Nitrogen/screenshot1679628312.png"],
      ["img/Nitrogen/screenshot1679628382.png"],
      ["img/Nitrogen/screenshot1682742734.png"],
      ["img/Nitrogen/screenshot1682743281.png"]],
      "iframes": [
        ["https://www.youtube.com/embed/RdIiOV1sdV8"],
        ["https://www.youtube.com/embed/rcvYkm93KPk", "Random walk around different biomes showing off the new upgraded textures."],
        ["https://www.youtube.com/embed/lcVZ34A1eII"]],
    "description": "A topdown multiplayer survival game. Currently in alpha, Nitrogen features a sandbox world with gameplay centered around exploration, agriculture, and cooking.",
    "paragraphs": [
      "Built upon my custom made game engine, Nitrogen pushes Python game development to it limits. Pairing procedural generation with hardware accelerated graphics, Nitrogen features a 2.5D infinite world with climate-driven ecosystems.",
      "The world generation simulates temperature, water availability, and salinity in order to determine what plants will grown in any location.",
      "Many of the plant textures are derivative of XfrogPlants wonderful 3d model libraries, created by botanical experts.",
      "-",
      "Features:",
      "As of writing; there are 62 distinct plants, each with its own proper name, growth stage, dropped item, substrate compatibility, moisture range, temperature range, salinity range, special flags, model type, tile size, and vertical height range",
      "A crafting system which allows materials to be combined into items, tools, food, tiles, and objects",
      "A nutrition system with 6 dietary needs: water, carbohydrates, protein, fattyacid, vitamins, and minerals. This encourages a diverse diet and hense an interesting growing/harvesting experience",
      "Tools allow actions, eg the axe lets you cut trees, spade lets you dig channels for water, leaf rake lets you clear dirt, hoe lets you till dirt into farmland",
      "Infinite world size (or at least larger than 2*10^10 x 2*10^10)",
      "Climate system with continuous functions for temperature, moisture, and altitude",
      "Climate based biome system with 9 biome families",
      "Reflections in water will show the sky and geometricly accurate paralaxed reflections of objects such as walls and trees",
      "Custom use of UDP sockets to allow real-time multiplayer via the game server, and the game world is downloaded in real time as your friends build it",
      "Spawnkey system allows you to spawn in the same place as your friends by sharing the key, or keep it private and play on your own",
      "Server selection defaults to cabbage.moe server, but hosting a private server is as easy as launching the server script and changing ip to localhost",
      "A Docker image is provided, making dedicated servers as easy as pressing a button",
      "Intelligent game loop which caches update progress and devides the work among multiple frames to eliminate fps lag, only sending the game state update to be rendered once it is finished",
      "Intelligent render pre-processor which keeps track of what has changed since the last game state, allowing only changed data to be sent to the gpu",
      "Custom geometry system for sending assets to the gpu to be rendered, including 9 geometry presets with texture ID, 3d position, length, width, mirroring, orthoganal rotation, and motion",
      "Random selection of objects over time allows for the dynamic change of the world around the player such as plants growing",
      "Adjustable zoom lets you render more or less of the world at once as desired",
      "Day night cycle with realistic lighting, sky, and moving shadows",
      "Lighting shader with support for 128 light sources of any colour and strength",
      "A sound-stage system which plays ambience according to in-game environment, such as day/night, rain storms, flowing water, sea waves, forest, desert",
      "Movement system with acceleration, velocity, difficult terrain, object collisions, walking, and sprinting",
      "Save states for character and game settings",
      "Variable window size and resolution as well as fullscreen",
      "Vsync can be set off or on to eliminate screen tearing",
      "A JSON inspired data format is used to store all game data (such as plants, tiles, objects, items, food) separate to the code, meaning you can add content without editing any game code",
      "Adjustable ui font size",
      "Supports OpenGL 3 and later, which should be just about every device",
      "Pre-loads all textures into a 2^14 x 2^14 texture pack which is stored on the gpu for lightning fast graphics",
      "Menu ui screens are drawn in a separate routine and sent to the gpu to be overlayed",
      "Sound effects for just about everything in-game, including terrain editing, footsteps, object interactions, swimming, plant interactions",
      "Gamepad support (beta)",
      "Multiplayer ID system with 10000 player slots",
      "Persistent hotbar for held items, used to interact with crafting menu and health menu",
      "Auto save on exit, and auto restore upon launch",
      "Tiered tile data structure with slots for ground material, object + object data, item + item count, and roof material. This allows multiple types of things to stack in a single location (eg, 5 cookies on top of an old table, on a wood floor under a tiled roof)",
      "Animated player sprites which synchronise between players, and interpolate to account for network lag",
      "Animated textures such as flowing water",
      "Plant growth depends on climate and substrate compatibility, with biome determining substrate",
      "As of writing; there are 70 distinct objects, 11 types of dirt, 22 types of tree, 14 foods, 11 items, and 15 crafting recipes",
      "Atmospheric effects such as clouds seen in reflections which cast shadows on the world, thick fog, and rain with geometrically accurate parallax / doppler shift",
      "Pressing F2 will instantly save a screenshot to the games screenshots folder"

    ],
    "links": {
      "Check it out on Github" : "https://github.com/cabbageman8/NitrogenGame",
      "Download latest version as zip" : "https://github.com/cabbageman8/NitrogenGame/archive/refs/heads/main.zip"
    }
  },
  "BeeEcology": {
    "title": "Bee Ecology Simulator",
    "year": "2020",
    "tags": ["Python","SAM","RPi","Pygame"],
    "images": [
      ["img/Bee/DSC_0256.JPG"],
      ["img/Bee/img78563.png"],
      ["img/Bee/img99.png"],
      ["img/Bee/DSC_0229.JPG"],
      ["img/Bee/DSC_0262.JPG"],
      ["img/Bee/DSC_0233.JPG"]],
    "description": "Interactive shows the effects of the recent Australian fires on the endangered green carpenter bee. This bee only lives on a tiny island called kangaroo island, where most of its habitat was burned in early 2020.",
    "paragraphs": [
      "In a team with SA Museum scientist Remko Leijs and the lead designer, I created an ecosystem simulator demonstrating the effect of bushfire on native bees. I created the simulation using python and used algorithms to model 25 years worth of data. Working with a scientist allowed the simulation to be reasonably accurate. The final simulator was in the SA Museum foyer for 6 months and is subsequently used by Remko Leijs for public demonstrations. ",
      "The system was entirely coded in Python and used custom http net code to send simulation data from a touch screen computer (where the user controls the simulation) to a second 4K screen computer over internal wifi.",
      "When making the software, I had to solve lots of interesting problems, often requiring the implementation of a custom data structure or algorithm. For example, the simulation used a “Z-order” data structure to store geographic information. The data about each 9 hectare tile (fire history, terrain types, etc) was stored in an object and the Z-order map placed the tiles in a 32x32 grid (9216 hectares total). ",
      "The simulation used mathematical models to determine how the tiles evolve over time and how they interact with each other. These algorithmic models were created based on scientific data and a body of research going back 25 years. The simulation starts at 2007 and allows the user to simulate the 2020 fire according to satellite imagery, and simulate an additional 30 years into the future. The time steps in the simulation were 1/8 of a year so that each tile could be updated twice per season. Therefor over the course of the 43 year simulation 2007-2050, the 1024 tiles would receive 344 updates, each doing complex calculations according to multiple factors and each effecting the tiles around it. ",
      "In order to create the Z-order map for 2007 (the terrain which every user starts with), I used the mathematical models from the simulator. I made a second program which takes png images of fire history and terrain data as input (The fire history map had data going back 50 years) and using these inputs the program simulated the history of the terrain in order to get accurate starting data for all the unknown parameters in the map."
    ],
    "links": {
      "Wheen Bee Foundation" : "https://www.wheenbeefoundation.org.au/news-events/buzz/bee-ecology-exhibition"
    }
  },
  "FluidSimulator": {
    "title": "Fluid Simulator",
    "year": "2021",
    "tags": ["Unity","Compute-Shader","Physics","Simulation"],
    "vids": [
      "vids/356785_Trim.mp4"],
    "images": [
      ["img/FluidSimulator/img34567.png", "Pouring liquid from a teapot results in a flow due to momentum and gravity."],
      ["img/FluidSimulator/img84563.png", "After exiting the pot, the liquid creates a vapor pressure which fills the room."],
      ["img/FluidSimulator/67846745.png"],
      ["img/FluidSimulator/9864345.png"],
      ["img/FluidSimulator/fero.gif", "Ferofluid interacting with a bar magnet."],
      ["img/FluidSimulator/bucket.gif"],
      ["img/FluidSimulator/galton_board.gif", "Galton board example shows probabilistic behaviour in a determonistic simulation."],
      ["img/FluidSimulator/hourglass.png"],
      ],
    "description": "Simulates liquid and gas in a 2D space. Made to test my ideas about a cellular physics simulator running on the GPU.",
    "paragraphs": [
      "The physics calculations are in the vein of a 'falling sand simulation' but take ideal gas laws and conservation of momentum into account.",
      "The project began as a Pygame program doing per pixel calculations on an image buffer. This allowed rapid development and enabled me to fortify my physics calculations; but the serial nature of the cpu was holding the simulation back.",
      "I then looked to compute shaders as the perfect solution to this problem. I began by making a Unity project, as Unity seemed like the best way to handle compute shaders at the time.",
      "I ported my per pixel calculations into hlsl and was met with a race condition issue where fluid from the simulation would get lost when being handed through global memory from one compute unit to another. This was solved by using a mosaic pattern update order, such that two compute units will never update the same cell at the same time."
    ]
  },
  "Nor": {
    "title": "NOR",
    "year": "2018",
    "tags": ["Python","iPad","SceneKit"],
    "images": [
      ["img/nor/IMG_7017.PNG"],
      ["img/nor/IMG_7014.PNG"],
      ["img/nor/IMG_7010.PNG"],
      ["img/nor/IMG_7009.PNG"],
      ["img/nor/IMG_7016.PNG"]],
    "iframes": [
      ["https://www.youtube.com/embed/WuY-R9KFgMg"]],
    "description": "A 2D sandbox puzzle game for iPad. It features computer generated landscapes, full terrain editing, computer generated logic puzzles and infinite levels.",
    "paragraphs": [
      "The game used advanced features such as vector graphics, procedural generation, RW bitmap objects, and OpenGL shaders. The player could move freely around a 2D world. Each zone in this world has distinct sky, rock, and flora. The flora included procedurally generated bushes, trees, and grass. The world could be edited by the player using a creative menu; where rock can be created or destroyed as the player desires. Each zone may be blocked by a logic puzzle based on real world electronic wiring, and once the player made the correct circuit, the player could access new zones."
    ],
    "links": {
      "NOR on AppAdvice" : "https://appadvice.com/app/nor/1433225207"
    }
  },
  "InsectBox": {
    "title": "Insect Simulation Box",
    "year": "2019",
    "tags": ["Python","SAM","RPi","TKinter"],
    "images": [
      ["img/InsectBox/IMG_1129.JPG"],
      ["img/InsectBox/IMG_1131.JPG"],
      ["img/InsectBox/IMG_1130.JPG"],
      ["img/InsectBox/img3456.png"],
      ["img/InsectBox/img9.jpeg"],
      ["img/InsectBox/image0.jpg"]],
    "description": "RFID based interactive where a range of insect specimens can be scanned in order to simulate how they compete with each other in an ecosystem.",
    "paragraphs": [
      "The project was contained in a stand-alone box with a battery, display, buttons, RFID scanner and specimens. This allowed the box to function as a traveling interactive for school visits.",
      "The hardware configuration centered around a Raspberry Pi 3b with peripheral HDMI display, amplified speakers, usb rfid scanner, MakeyMakey usb input-controller, large rechargeable battery cell, RetroPSU circuit for battery charging via usb.",
      "The software was written in python and used TKinter for gui. All inputs were parsed as keystroke events, including push button presses and rfid scans. When an insect was scanned, the usb scanner would enter the id of that insect as keystrokes, telling python which insect it is. After scanning multiple insects, pressing the blue button would start the simulation, which creates a graph of the population and food recources over time. Pressing the green button at any time would activate text to speach; where the text on screen gets read out through the speakers."
    ],
    "links": {
      "Raspberry Pi 3b" : "https://www.raspberrypi.org/products/raspberry-pi-3-model-b",
      "MakeyMakey" : "https://makeymakey.com/",
      "RetroPSU" : "https://www.heldergametech.com/shop/gameboy-zero/retropsu"
    }
  },
  "PyconAUSydney": {
    "title": "Speaker at Pycon-AU",
    "year": "2018",
    "tags": ["Python","NOR","Sydney","Public-Event"],
    "images": [
      ["img/PyconAUSydney/IMG_6462.JPG"],
      ["img/PyconAUSydney/IMG_9029.JPG"],
      ["img/PyconAUSydney/IMG_0764.JPG"]],
    "description": "I gave a talk at the national python convention to speak about my journey from learning python to creating my second iPad game “NOR”.",
    "paragraphs": [
      "After being accepted to speak, I flew to Sydney to attend PyconAU 2018 in the ICC. My talk was part of the Education Seminar Student Showcase, a group of eight talks by students from around the country."
    ],
    "links": {
      "About NOR" : "https://cabbage.moe/#/Nor",
      "Full Showcase Video" : "https://youtu.be/QNAgPjbn0Ws"
    }
  },
  "PythonistaWork": {
    "title": "IOS Development in Pythonista",
    "year": "2015-2018",
    "tags": ["Python","iPad","Pythonista"],
    "images": [["img/PythonistaWork/IMG_7482.PNG"]],
    "vids": [
      "vids/IMG_6911.TRIM.MOV",
      "vids/IMG_6899.TRIM.MOV",
      "vids/IMG_6921.TRIM.MOV",
      "vids/IMG_6929.TRIM.MOV",
      "vids/IMG_6933.TRIM.MOV"],
    "description": "While learning python, I developed many miscellaneous projects on iPad using the IDE app Pythonista.",
    "paragraphs": [
      ""
    ]
  },
  "Boxscape": {
    "title": "Boxscape",
    "year": "2015",
    "tags": ["Python","iPad","Pythonista"],
    "images": [
      ["img/Boxscape/750x750bb.jpeg"],
      ["img/Boxscape/45670bb.jpeg"],
      ["img/Boxscape/75484560bb.jpeg"]],
    "description": "My first published software. An arcade style challenge game.",
    "paragraphs": [
      "This game used exclusively 'basic drawing' which involved writing shapes to the screen every frame. The shapes used were rectangles and ellipses.",
      "Boxscape used the Pickle module to store persistent data, such as the amount of coins collected and which player characters have been unlocked."
    ],
    "links": {
      "Boxscape on AppAdvice" : "https://appadvice.com/app/boxscape/1053771238"
    }
  },
  "Webgl": {
    "title": "WebGL Shaders",
    "year": "2019",
    "tags": ["WebGL","Fragment-Shader","Fractals"],
    "images": [
      ["img/Webgl/img46357.png"],
      ["img/Webgl/img4582.png"],
      ["img/Webgl/img89376.png"],
      ["img/Webgl/img486784.png"],
      ["img/Webgl/img786378.png"],
      ["img/Webgl/img3785857.png"]],
    "description": "Using knowledge of fragment shaders, explored mathematical concepts in web browser.",
    "paragraphs": [
      ""
    ]
  },
  "STEMCongress": {
    "title": "STEM Aboriginal Student Congress",
    "year": "2018",
    "tags": ["STEM","Python","Public-Event"],
    "images": [["img/STEMCongress/img57463875.JPG"]],
    "description": "Helped students from across the state to learn about software development. By the end the students had each made a basic IOS app using SpriteKit in Pythonista",
    "paragraphs": [
      ""
    ]
  }
}
